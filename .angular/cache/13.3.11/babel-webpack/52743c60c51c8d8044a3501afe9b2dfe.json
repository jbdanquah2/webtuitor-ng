{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\johnd\\\\Downloads\\\\m_codes\\\\webtuitor-ng\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\johnd\\\\Downloads\\\\m_codes\\\\webtuitor-ng\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { Inject, Injectable, InjectionToken, PLATFORM_ID } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common'; // This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\n\nimport * as ɵngcc0 from '@angular/core';\nvar CookieService = /*#__PURE__*/(function () {\n  var CookieService = /*#__PURE__*/function () {\n    /**\n     * @param {?} document\n     * @param {?} platformId\n     */\n    function CookieService(document, platformId) {\n      _classCallCheck(this, CookieService);\n\n      this.document = document;\n      this.platformId = platformId;\n      this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * @param {?} name Cookie name\n     * @return {?}\n     */\n\n\n    return _createClass(CookieService, [{\n      key: \"check\",\n      value: function check(name) {\n        if (!this.documentIsAccessible) {\n          return false;\n        }\n\n        name = encodeURIComponent(name);\n        var\n        /** @type {?} */\n        regExp = this.getCookieRegExp(name);\n        var\n        /** @type {?} */\n        exists = regExp.test(this.document.cookie);\n        return exists;\n      }\n      /**\n       * @param {?} name Cookie name\n       * @return {?}\n       */\n\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        if (this.documentIsAccessible && this.check(name)) {\n          name = encodeURIComponent(name);\n          var\n          /** @type {?} */\n          regExp = this.getCookieRegExp(name);\n          var\n          /** @type {?} */\n          result = regExp.exec(this.document.cookie);\n          return decodeURIComponent(result[1]);\n        } else {\n          return '';\n        }\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getAll\",\n      value: function getAll() {\n        if (!this.documentIsAccessible) {\n          return {};\n        }\n\n        var\n        /** @type {?} */\n        cookies = {};\n        var\n        /** @type {?} */\n        document = this.document;\n\n        if (document.cookie && document.cookie !== '') {\n          var\n          /** @type {?} */\n          split = document.cookie.split(';');\n\n          for (var\n          /** @type {?} */\n          i = 0; i < split.length; i += 1) {\n            var\n            /** @type {?} */\n            currentCookie = split[i].split('=');\n            currentCookie[0] = currentCookie[0].replace(/^ /, '');\n            cookies[decodeURIComponent(currentCookie[0])] = decodeURIComponent(currentCookie[1]);\n          }\n        }\n\n        return cookies;\n      }\n      /**\n       * @param {?} name     Cookie name\n       * @param {?} value    Cookie value\n       * @param {?=} expires  Number of days until the cookies expires or an actual `Date`\n       * @param {?=} path     Cookie path\n       * @param {?=} domain   Cookie domain\n       * @param {?=} secure   Secure flag\n       * @param {?=} sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `None`\n       * @return {?}\n       */\n\n    }, {\n      key: \"set\",\n      value: function set(name, value, expires, path, domain, secure) {\n        var sameSite = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'None';\n\n        if (!this.documentIsAccessible) {\n          return;\n        }\n\n        var\n        /** @type {?} */\n        cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n        if (expires) {\n          if (typeof expires === 'number') {\n            var\n            /** @type {?} */\n            dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n            cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n          } else {\n            cookieString += 'expires=' + expires.toUTCString() + ';';\n          }\n        }\n\n        if (path) {\n          cookieString += 'path=' + path + ';';\n        }\n\n        if (domain) {\n          cookieString += 'domain=' + domain + ';';\n        }\n\n        if (secure) {\n          cookieString += 'secure;';\n        }\n\n        cookieString += 'sameSite=' + sameSite + ';';\n        this.document.cookie = cookieString;\n      }\n      /**\n       * @param {?} name   Cookie name\n       * @param {?=} path   Cookie path\n       * @param {?=} domain Cookie domain\n       * @return {?}\n       */\n\n    }, {\n      key: \"delete\",\n      value: function _delete(name, path, domain) {\n        if (!this.documentIsAccessible) {\n          return;\n        }\n\n        this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain, undefined, 'Lax');\n      }\n      /**\n       * @param {?=} path   Cookie path\n       * @param {?=} domain Cookie domain\n       * @return {?}\n       */\n\n    }, {\n      key: \"deleteAll\",\n      value: function deleteAll(path, domain) {\n        if (!this.documentIsAccessible) {\n          return;\n        }\n\n        var\n        /** @type {?} */\n        cookies = this.getAll();\n\n        for (var\n        /** @type {?} */\n        cookieName in cookies) {\n          if (cookies.hasOwnProperty(cookieName)) {\n            this.delete(cookieName, path, domain);\n          }\n        }\n      }\n      /**\n       * @param {?} name Cookie name\n       * @return {?}\n       */\n\n    }, {\n      key: \"getCookieRegExp\",\n      value: function getCookieRegExp(name) {\n        var\n        /** @type {?} */\n        escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n      }\n    }]);\n  }();\n\n  CookieService.ɵfac = function CookieService_Factory(t) {\n    return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  CookieService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: CookieService,\n    factory: CookieService.ɵfac\n  });\n  /**\n   * @nocollapse\n   */\n\n  return CookieService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CookieService }; //# sourceMappingURL=ngx-cookie-service.js.map","map":null,"metadata":{},"sourceType":"module"}