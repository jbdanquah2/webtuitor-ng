{"ast":null,"code":"import _classCallCheck from \"C:/Users/johnd/Downloads/m_codes/webtuitor-ng/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/johnd/Downloads/m_codes/webtuitor-ng/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var MentorService = /*#__PURE__*/(function () {\n  var MentorService = /*#__PURE__*/function () {\n    function MentorService() {\n      _classCallCheck(this, MentorService);\n\n      this.url = 'https://api.github.com/users';\n    }\n\n    return _createClass(MentorService, [{\n      key: \"getMentors\",\n      value: function getMentors() {\n        var subject = new Subject();\n        fetch(this.url).then(function (response) {\n          if (response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' + response.status);\n            return;\n          } // Examine the text in the response\n\n\n          response.json().then(function (data) {\n            subject.next(data);\n            subject.complete();\n            console.log('John', data);\n          });\n        }).catch(function (err) {\n          console.log('Fetch Error :-S', err);\n        });\n        return subject;\n      }\n    }, {\n      key: \"getMentor\",\n      value: function getMentor(username) {\n        var subject = new Subject();\n        console.log('heer: ' + username + ' love');\n        fetch(\"\".concat(this.url, \"/\").concat(username)).then(function (response) {\n          if (response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' + response.status);\n            return;\n          } // Examine the text in the response\n\n\n          response.json().then(function (data) {\n            subject.next(data);\n            subject.complete(); // console.log('Johnny boy',data);\n            // return data\n          });\n        }).catch(function (err) {\n          console.log('Fetch Error :-S', err);\n        });\n        return subject; // return Mentors.find(mentor => mentor.id == id)\n      }\n    }]);\n  }();\n\n  MentorService.ɵfac = function MentorService_Factory(t) {\n    return new (t || MentorService)();\n  };\n\n  MentorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MentorService,\n    factory: MentorService.ɵfac\n  });\n  return MentorService;\n})();","map":null,"metadata":{},"sourceType":"module"}